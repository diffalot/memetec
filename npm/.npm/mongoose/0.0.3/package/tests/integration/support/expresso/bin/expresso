#!/usr/bin/env node

/*!
 * Expresso
 * Copyright(c) TJ Holowaychuk <tj@vision-media.ca>
 * (MIT Licensed)
 */
 
/**
 * Module dependencies.
 */

var assert = require('assert'),
    childProcess = require('child_process'),
    path = require('path'),
    sys = require('sys'),
    cwd = process.cwd(),
    fs = require('fs'),
    defer;

/**
 * Expresso version.
 */

var version = '0.0.3';

/**
 * Failures hash.
 */

var failures = {};

/**
 * Failure count.
 */

var failed = 0;

/**
 * Boring output
 */
 
var boring = false;

/**
 * Usage documentation.
 */

var usage = [
    'usage: expresso [-h|--help] [-v|--version] [-i|-I|--include <path>]',
    '       [-c|--coverage] [-r|--require <module>] [-b|--boring] <file ...>'
].join('\n')

// Parse arguments

var files = [],
    args = process.argv.slice(2);

while (args.length) {
    var arg = args.shift();
    switch (arg) {
        case '-h':
        case '--help':
            sys.puts(usage);
            process.exit(1);
            break;
        case '-v':
        case '--version':
            sys.puts(version);
            process.exit(1);
            break;
        case '-i':
        case '-I':
        case '--include':
            if (arg = args.shift()) {
                require.paths.unshift(arg);
            } else {
                throw new Error('--include requires a path');
            }
            break;
        case '-r':
        case '--require':
            if (arg = args.shift()) {
                require(arg);
            } else {
                throw new Error('--require requires a path');
            }
            break;
        case '-c':
        case '--cov':
        case '--coverage':
            defer = true;
            childProcess.exec('rm -fr lib-cov && node-jscoverage lib lib-cov', function(err){
                if (err) throw err;
                require.paths.unshift('lib-cov');
                run(files);
            })
            break;
        case '-b':
        case '--boring':
        	boring = true;
        	break;
        default:
            files.push(arg);
            break;
    }
}

// Alias deepEqual as eql for complex equality

assert.eql = assert.deepEqual;

// Output pretty uncaught exceptions

process.addListener('uncaughtException', function(err){
    ++failed;
    if (boring) {
	    sys.puts('\n   async: ' + err.stack);
    } else {
	    var msg = err.toString();
    	msg = err.stack.replace(msg, '\x1B[31m' + msg + '\x1B[0m');
	    sys.puts('\n   \x1B[1masync\x1B[0m: ' + msg);
    }
})

// Report test coverage when available

process.addListener('exit', function(){
    if (!failed) {
    	if (boring) {
        	sys.puts('   100% passes');
    	} else {
        	sys.puts('   \x1B[32m100%\x1B[0m \x1B[1mpasses\x1B[0m');
        }
    }
    if (typeof _$jscoverage === 'object') {
        reportCoverage(_$jscoverage);
    }
    process.reallyExit(failed);
});

/**
 * Pad the given string to the maximum width provided.
 *
 * @param  {String} str
 * @param  {Number} width
 * @return {String}
 * @api private
 */

function lpad(str, width) {
    str = String(str);
    var n = width - str.length;
    if (n < 1) return str;
    while (n--) str = ' ' + str;
    return str;
}

/**
 * Pad the given string to the maximum width provided.
 *
 * @param  {String} str
 * @param  {Number} width
 * @return {String}
 * @api private
 */

function rpad(str, width) {
    str = String(str);
    var n = width - str.length;
    if (n < 1) return str;
    while (n--) str = str + ' ';
    return str;
}

/**
 * Report test coverage.
 *
 * @param  {Object} cov
 * @api private
 */

function reportCoverage(cov) {
    populateCoverage(cov);
    if (boring) {
    	sys.puts('\n   Test Coverage');
    } else {
    	sys.puts('\n   \x1B[1mTest Coverage\x1B[0m');
    }
    var sep = '   +------------------------------------------+----------+------+------+--------+',
        lastSep = '                                              +----------+------+------+--------+';
    sys.puts(sep);
    sys.puts('   | filename                                 | coverage | LOC  | SLOC | missed |');
    sys.puts(sep);
    for (var name in cov) {
        var file = cov[name];
        if (file instanceof Array) {
            sys.print('   | ' + rpad(name, 40));
            sys.print(' | ' + lpad(file.coverage.toFixed(2), 8));
            sys.print(' | ' + lpad(file.LOC, 4));
            sys.print(' | ' + lpad(file.SLOC, 4));
            sys.print(' | ' + lpad(file.totalMisses, 6));
            sys.print(' |\n');
        }
    }
    sys.puts(sep);
    sys.print('     ' + rpad('', 40));
    sys.print(' | ' + lpad(cov.coverage.toFixed(2), 8));
    sys.print(' | ' + lpad(cov.LOC, 4));
    sys.print(' | ' + lpad(cov.SLOC, 4));
    sys.print(' | ' + lpad(cov.totalMisses, 6));
    sys.print(' |\n');
    sys.puts(lastSep);
}

/**
 * Populate code coverage data.
 *
 * @param  {Object} cov
 * @api private
 */

function populateCoverage(cov) {
    cov.LOC = 
    cov.SLOC =
    cov.totalFiles =
    cov.totalHits =
    cov.totalMisses = 
    cov.coverage = 0;
    for (var name in cov) {
        var file = cov[name];
        if (file instanceof Array) {
            ++cov.totalFiles;
            cov.totalHits += file.totalHits = coverage(file, true);
            cov.totalMisses += file.totalMisses = coverage(file, false);
            file.totalLines = file.totalHits + file.totalMisses;
            cov.SLOC += file.SLOC = file.totalLines;
            cov.LOC += file.LOC = file.source.length;
            file.coverage = (file.totalHits / file.totalLines) * 100;
        }
    }
    cov.coverage = (cov.totalHits / cov.SLOC) * 100;
};

/**
 * Total coverage for the given file data.
 *
 * @param  {Array} data
 * @return {Type}
 * @api private
 */

function coverage(data, val) {
    var n = 0;
    for (var i = 0, len = data.length; i < len; ++i) {
        if (data[i] !== undefined && data[i] == val) ++n;
    }
    return n;  
};

/**
 * Run all test files.
 *
 * @param  {Array} files
 * @api public
 */

function run(files, dir) {
    if (files.length) {
        files.forEach(function(file){
            runSuite(path.basename(file), require(path.join(cwd, dir, file.replace('.js', ''))));
        });
        reportFailures();
    } else {
        fs.readdir('test', function(err, files){
            if (err) sys.error('failed to run tests in ./test'), process.exit(1);
            run(files, 'test/');
        });
    }
}

/**
 * Report global failures.
 *
 * @api private
 */

function reportFailures() {
    for (var suite in failures) {
        var n = 0;
        sys.puts('\n   Failures in ' + suite);
        for (var test in failures[suite]) {
            var err = failures[suite][test],
                msg = err.toString(),
                msg = err.stack.replace(msg, '\x1B[31m' + msg + '\x1B[0m');
                
            if (boring) {
            	sys.puts('\n   ' + ++n + ') ' + test + ': ' + err.stack);
            } else {
            	sys.puts('\n   ' + ++n + ') \x1B[1m' + test + '\x1B[0m: ' + msg);
            }
        }
    }
}

/**
 * Run the given tests.
 *
 * @param  {String} title
 * @param  {Object} tests
 * @api private
 */

function runSuite(title, tests) {
    var keys = Object.keys(tests);
    (function next(){
        if (keys.length) {
            var key,
                test = tests[key = keys.shift()];
            try {
                test(assert);
            } catch (err) {
                ++failed;
                failures[title] = failures[title] || {};
                failures[title][key] = err;
            }
            next();
        }
    })();
}

// Run test files

if (!defer) run(files);
